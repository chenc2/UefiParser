from BaseType import *

def SIGNATURE_16(A,B):
  return A | (B << 8)

def SIGNATURE_32(A,B,C,D):
  return SIGNATURE_16(A,B) | (SIGNATURE_16(C,D) << 16)

def SIGNATURE_64(A,B,C,D,E,F,G,H):
  return SIGNATURE_32(A,B,C,D)  | (SIGNATURE_32(E,F,G,H) << 32)

def SIGNATURE_TO_STR(SigValue):
  str = ""
  while SigValue != 0:
    str = str + chr(SigValue & 0xFF)
    SigValue = SigValue >> 8
  return str

#
# Base type
#
EFI_GUID = [UINT32, UINT16, UINT16] + [UINT8] * 8

#
# For uCode
#
CPU_MICROCODE_HEADER                = [UINT32] * 9 + [UINT8] * 12
CPU_MICROCODE_EXTENDED_TABLE_HEADER = [UINT32] * 2 + [UINT8] * 12
CPU_MICROCODE_EXTENDED_TABLE        = [UINT32] * 3

#
# For Capsule
#
EFI_CAPSULE_HEADER                            = [EFI_GUID] + [UINT32] * 3
EFI_FIRMWARE_MANAGEMENT_CAPSULE_HEADER        = [UINT32] + [UINT16] * 2
EFI_FIRMWARE_MANAGEMENT_CAPSULE_IMAGE_HEADER  = [UINT32, EFI_GUID] + [UINT8] * 4 + [UINT32] * 2 + [UINT64]
FMP_PAYLOAD_HEADER                            = [UINT32] * 4

#
# For Fv
#
EFI_FVB_ATTRIBUTES          = UINT32
EFI_FV_BLOCK_MAP_ENTRY      = [UINT32, UINT32]
EFI_FIRMWARE_VOLUME_HEADER  = [UINT8] * 16 + [EFI_GUID, UINT64, UINT32, EFI_FVB_ATTRIBUTES, UINT16, UINT16, UINT16, UINT8, UINT8] + EFI_FV_BLOCK_MAP_ENTRY

EFI_FFS_INTEGRITY_CHECK     = UINT16
EFI_FV_FILETYPE             = UINT8
EFI_FFS_FILE_ATTRIBUTES     = UINT8
EFI_FFS_FILE_STATE          = UINT8

EFI_FFS_FILE_HEADER         = [EFI_GUID, EFI_FFS_INTEGRITY_CHECK, EFI_FV_FILETYPE, EFI_FFS_FILE_ATTRIBUTES, UINT8, UINT8, UINT8, EFI_FFS_FILE_STATE]

EFI_FVH_SIGNATURE           = SIGNATURE_32(ord('_'),ord('F'),ord('V'),ord('H'))
EFI_FVN_SIGNATURE_STR       = "_FVH"

#
# For INTEL_MICROCODE_VERSION_FFS_DATA
#
INTEL_MICROCODE_VERSION_FFS_DATA = [UINT32, UINT32]